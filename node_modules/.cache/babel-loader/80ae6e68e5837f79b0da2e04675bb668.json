{"ast":null,"code":"import axios from \"axios\";\nimport { API_ENDPOINT } from \"../constants\";\nimport AuthService from \"./AuthService\";\n\nclass TaskService {\n  constructor() {\n    this.tasks = [{\n      id: 1,\n      description: \"Tarefa 1\",\n      whenToDo: \"2030-01-01\",\n      done: false\n    }, {\n      id: 2,\n      description: \"Tarefa 2\",\n      whenToDo: \"2030-01-03\",\n      done: false\n    }, {\n      id: 3,\n      description: \"Tarefa 3\",\n      whenToDo: \"2030-01-02\",\n      done: false\n    }];\n  }\n\n  list(onFetch, onError) {\n    axios.get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, this.buildAuthHeader()).then(response => onFetch(response.data.content)).catch(e => onError(e));\n  }\n\n  load(id, onLoad, onError) {\n    axios.get(`${API_ENDPOINT}/tasks/${id}`, this.buildAuthHeader()).then(response => onLoad(response.data)).catch(e => onError(e));\n  }\n\n  delete(id, onDelete, onError) {\n    axios.delete(`${API_ENDPOINT}/tasks/${id}`, this.buildAuthHeader()).then(() => onDelete()).catch(e => onError(e));\n  }\n\n  save(task) {\n    if (task.id !== 0) {\n      this.tasks = this.tasks.map(t => task.id !== t.id ? t : task);\n    } else {\n      const taskId = Math.max(...this.tasks.map(t => t.id)) + 1;\n      task.id = taskId;\n      this.tasks.push(task);\n    }\n  }\n\n  buildAuthHeader() {\n    return {\n      headers: {\n        \"authorization\": `Bearer ${AuthService.getJWTToken()}`\n      }\n    };\n  }\n\n}\n\nexport default new TaskService();","map":{"version":3,"sources":["C:/Users/leand/Documents/workspace/loop-frontend/src/api/TaskService.js"],"names":["axios","API_ENDPOINT","AuthService","TaskService","constructor","tasks","id","description","whenToDo","done","list","onFetch","onError","get","buildAuthHeader","then","response","data","content","catch","e","load","onLoad","delete","onDelete","save","task","map","t","taskId","Math","max","push","headers","getJWTToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,CACT;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,WAAW,EAAE,UAAtB;AAAkCC,MAAAA,QAAQ,EAAE,YAA5C;AAA0DC,MAAAA,IAAI,EAAE;AAAhE,KADS,EAET;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,WAAW,EAAE,UAAtB;AAAkCC,MAAAA,QAAQ,EAAE,YAA5C;AAA0DC,MAAAA,IAAI,EAAE;AAAhE,KAFS,EAGT;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,WAAW,EAAE,UAAtB;AAAkCC,MAAAA,QAAQ,EAAE,YAA5C;AAA0DC,MAAAA,IAAI,EAAE;AAAhE,KAHS,CAAb;AAMH;;AAEDC,EAAAA,IAAI,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACnBZ,IAAAA,KAAK,CACJa,GADD,CACM,GAAEZ,YAAa,0BADrB,EACgD,KAAKa,eAAL,EADhD,EAECC,IAFD,CAEMC,QAAQ,IAAIL,OAAO,CAACK,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAFzB,EAGCC,KAHD,CAGOC,CAAC,IAAIR,OAAO,CAACQ,CAAD,CAHnB;AAKH;;AAEDC,EAAAA,IAAI,CAACf,EAAD,EAAKgB,MAAL,EAAaV,OAAb,EAAsB;AACtBZ,IAAAA,KAAK,CACJa,GADD,CACM,GAAEZ,YAAa,UAASK,EAAG,EADjC,EACoC,KAAKQ,eAAL,EADpC,EAECC,IAFD,CAEMC,QAAQ,IAAIM,MAAM,CAACN,QAAQ,CAACC,IAAV,CAFxB,EAGCE,KAHD,CAGOC,CAAC,IAAIR,OAAO,CAACQ,CAAD,CAHnB;AAIH;;AAEDG,EAAAA,MAAM,CAACjB,EAAD,EAAKkB,QAAL,EAAeZ,OAAf,EAAwB;AAC1BZ,IAAAA,KAAK,CACJuB,MADD,CACS,GAAEtB,YAAa,UAASK,EAAG,EADpC,EACuC,KAAKQ,eAAL,EADvC,EAECC,IAFD,CAEM,MAAMS,QAAQ,EAFpB,EAGCL,KAHD,CAGOC,CAAC,IAAIR,OAAO,CAACQ,CAAD,CAHnB;AAKH;;AAEDK,EAAAA,IAAI,CAACC,IAAD,EAAO;AACP,QAAIA,IAAI,CAACpB,EAAL,KAAY,CAAhB,EAAmB;AACf,WAAKD,KAAL,GAAa,KAAKA,KAAL,CAAWsB,GAAX,CAAeC,CAAC,IAAIF,IAAI,CAACpB,EAAL,KAAYsB,CAAC,CAACtB,EAAd,GAAmBsB,CAAnB,GAAuBF,IAA3C,CAAb;AACH,KAFD,MAEO;AACJ,YAAMG,MAAM,GAAIC,IAAI,CAACC,GAAL,CAAS,GAAG,KAAK1B,KAAL,CAAWsB,GAAX,CAAeC,CAAC,IAAIA,CAAC,CAACtB,EAAtB,CAAZ,IAAyC,CAAzD;AACAoB,MAAAA,IAAI,CAACpB,EAAL,GAAUuB,MAAV;AACA,WAAKxB,KAAL,CAAW2B,IAAX,CAAgBN,IAAhB;AAEF;AACJ;;AAEDZ,EAAAA,eAAe,GAAG;AACd,WAAO;AACHmB,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAAS/B,WAAW,CAACgC,WAAZ,EAA0B;AADhD;AADN,KAAP;AAKH;;AAlDa;;AAqDlB,eAAe,IAAI/B,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nimport { API_ENDPOINT } from \"../constants\";\r\nimport AuthService from \"./AuthService\";\r\n\r\nclass TaskService {\r\n    constructor() {\r\n        this.tasks = [\r\n            { id: 1, description: \"Tarefa 1\", whenToDo: \"2030-01-01\", done: false },\r\n            { id: 2, description: \"Tarefa 2\", whenToDo: \"2030-01-03\", done: false },\r\n            { id: 3, description: \"Tarefa 3\", whenToDo: \"2030-01-02\", done: false }\r\n        ]\r\n\r\n    }\r\n\r\n    list(onFetch, onError) {\r\n        axios\r\n        .get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, this.buildAuthHeader())\r\n        .then(response => onFetch(response.data.content))\r\n        .catch(e => onError(e));\r\n\r\n    }\r\n\r\n    load(id, onLoad, onError) {\r\n        axios\r\n        .get(`${API_ENDPOINT}/tasks/${id}`, this.buildAuthHeader())\r\n        .then(response => onLoad(response.data))\r\n        .catch(e => onError(e));\r\n    }\r\n\r\n    delete(id, onDelete, onError) {\r\n        axios\r\n        .delete(`${API_ENDPOINT}/tasks/${id}`, this.buildAuthHeader())\r\n        .then(() => onDelete())\r\n        .catch(e => onError(e));\r\n        \r\n    }\r\n\r\n    save(task) {\r\n        if (task.id !== 0) {\r\n            this.tasks = this.tasks.map(t => task.id !== t.id ? t : task);\r\n        } else {\r\n           const taskId =  Math.max(...this.tasks.map(t => t.id)) + 1;\r\n           task.id = taskId;\r\n           this.tasks.push(task);\r\n\r\n        }\r\n    }\r\n    \r\n    buildAuthHeader() {\r\n        return {\r\n            headers: {\r\n                \"authorization\": `Bearer ${AuthService.getJWTToken()}`\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nexport default new TaskService();"]},"metadata":{},"sourceType":"module"}
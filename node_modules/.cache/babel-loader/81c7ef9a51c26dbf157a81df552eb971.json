{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useContext, useState } from \"react\";\nimport { API_ENDPOINT } from \"../constants\";\nimport { AuthContext } from \"./useAuth\";\nexport const useTasks = () => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const [taskList, setTaskList] = useState([]);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [taskRemoved, setTaskRemoved] = useState(null);\n  const [taskUpdated, setTaskUpdated] = useState(null);\n  const [taskLoaded, setTaskLoaded] = useState(null);\n\n  const list = async () => {\n    try {\n      setProcessing(true);\n      setError(null);\n      const response = await axios.get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, buildAuthHeader());\n      setTaskList(response.data.content);\n      setProcessing(false);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const remove = async taskToRemove => {\n    try {\n      await axios.delete(`${API_ENDPOINT}/tasks/${taskToRemove.id}`, buildAuthHeader());\n      setTaskList(taskList.filter(task => taskToRemove.id !== task.id));\n      setTaskRemoved(taskToRemove);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const save = async (taskToSave, onlyStatus = false) => {\n    try {\n      setProcessing(!onlyStatus);\n      setTaskUpdated(null);\n      setError(null);\n\n      if (taskToSave.id === 0) {\n        await axios.post(`${API_ENDPOINT}/tasks`, taskToSave, buildAuthHeader());\n      } else {\n        await axios.put(`${API_ENDPOINT}/tasks/${taskToSave.id}`, taskToSave, buildAuthHeader());\n      }\n\n      setProcessing(false);\n      setTaskUpdated(taskToSave);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const load = async id => {\n    try {\n      setProcessing(true);\n      setError(null);\n      setTaskLoaded(null);\n      const response = await axios.get(`${API_ENDPOINT}/tasks/${id}`, buildAuthHeader());\n      setTaskLoaded(response.data);\n      setProcessing(false);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const clearTaskRemoved = () => {\n    setTaskRemoved(null);\n  };\n\n  const clearTaskUpdated = () => {\n    setTaskUpdated(null);\n  };\n\n  const clearTaskLoaded = () => {\n    setTaskLoaded(null);\n  };\n\n  const buildAuthHeader = () => {\n    return {\n      headers: {\n        \"authorization\": `Bearer ${auth.credentials.token}`\n      }\n    };\n  };\n\n  const handleError = error => {\n    console.log(error);\n    const resp = error.response;\n\n    if (resp && resp.status === 400 && resp.data) {\n      setError(resp.data.error);\n    } else {\n      setError(error.message);\n    }\n\n    setProcessing(false);\n  };\n\n  return {\n    taskList,\n    error,\n    processing,\n    taskRemoved,\n    taskUpdated,\n    taskLoaded,\n    list,\n    remove,\n    save,\n    load,\n    clearTaskRemoved,\n    clearTaskUpdated,\n    clearTaskLoaded\n  };\n};\n\n_s(useTasks, \"31srwvWHl8thDjwD3It6qzAjgfQ=\");","map":{"version":3,"sources":["C:/Users/leand/Documents/workspace/looptasks-frontend/src/hooks/useTasks.js"],"names":["axios","useContext","useState","API_ENDPOINT","AuthContext","useTasks","auth","taskList","setTaskList","error","setError","processing","setProcessing","taskRemoved","setTaskRemoved","taskUpdated","setTaskUpdated","taskLoaded","setTaskLoaded","list","response","get","buildAuthHeader","data","content","handleError","remove","taskToRemove","delete","id","filter","task","save","taskToSave","onlyStatus","post","put","load","clearTaskRemoved","clearTaskUpdated","clearTaskLoaded","headers","credentials","token","console","log","resp","status","message"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { useContext, useState } from \"react\";\r\nimport { API_ENDPOINT } from \"../constants\";\r\nimport { AuthContext } from \"./useAuth\";\r\n\r\nexport const useTasks = () => {\r\n    const auth = useContext(AuthContext);\r\n    const [taskList, setTaskList] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [processing, setProcessing] = useState(false);\r\n    const [taskRemoved, setTaskRemoved] = useState(null);\r\n    const [taskUpdated, setTaskUpdated] = useState(null);\r\n    const [taskLoaded, setTaskLoaded] = useState(null);\r\n\r\n\r\n    const list = async () => {\r\n\r\n        try {\r\n            setProcessing(true);\r\n            setError(null);\r\n            const response = await axios\r\n                .get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, buildAuthHeader());\r\n            setTaskList(response.data.content);\r\n            setProcessing(false);\r\n\r\n        } catch (error) {\r\n            handleError(error);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const remove = async (taskToRemove) => {\r\n        try {\r\n            await axios\r\n                .delete(`${API_ENDPOINT}/tasks/${taskToRemove.id}`, buildAuthHeader());\r\n            setTaskList(taskList.filter(task => taskToRemove.id !== task.id));\r\n            setTaskRemoved(taskToRemove);\r\n\r\n        } catch (error) {\r\n            handleError(error);\r\n\r\n        }\r\n    }\r\n\r\n    const save = async (taskToSave, onlyStatus = false) => {\r\n        try {\r\n\r\n            setProcessing(!onlyStatus);\r\n            setTaskUpdated(null);\r\n            setError(null);\r\n\r\n            if (taskToSave.id === 0) {\r\n                await axios\r\n                    .post(`${API_ENDPOINT}/tasks`, taskToSave, buildAuthHeader());\r\n            } else {\r\n                await axios\r\n                    .put(`${API_ENDPOINT}/tasks/${taskToSave.id}`, taskToSave, buildAuthHeader());\r\n            }\r\n\r\n            setProcessing(false);\r\n            setTaskUpdated(taskToSave);\r\n\r\n        } catch (error) {\r\n            handleError(error);\r\n        }\r\n    }\r\n\r\n    const load = async (id) => {\r\n        try {\r\n            setProcessing(true);\r\n            setError(null);\r\n            setTaskLoaded(null);\r\n            const response = await axios\r\n                .get(`${API_ENDPOINT}/tasks/${id}`, buildAuthHeader());\r\n                setTaskLoaded(response.data);\r\n                setProcessing(false);\r\n        } catch (error) {\r\n            handleError(error);\r\n\r\n        }\r\n    }\r\n\r\n    const clearTaskRemoved = () => {\r\n        setTaskRemoved(null);\r\n    }\r\n\r\n    const clearTaskUpdated = () => {\r\n        setTaskUpdated(null);\r\n    }\r\n    const clearTaskLoaded = () => {\r\n        setTaskLoaded(null);\r\n    }\r\n\r\n    const buildAuthHeader = () => {\r\n        return {\r\n            headers: {\r\n                \"authorization\": `Bearer ${auth.credentials.token}`\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleError = (error) => {\r\n        console.log(error);\r\n        const resp = error.response;\r\n\r\n        if (resp && resp.status === 400 && resp.data) {\r\n            setError(resp.data.error);\r\n        } else {\r\n            setError(error.message);\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    return { taskList, error, processing, taskRemoved, taskUpdated, taskLoaded, list, remove, save, load, clearTaskRemoved, clearTaskUpdated, clearTaskLoaded };\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useContext, useState } from \"react\";\nimport { API_ENDPOINT } from \"../constants\";\nimport { AuthContext } from \"./useAuth\";\nexport const useTasks = () => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const [taskList, setTaskList] = useState([]);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [taskRemoved, setTaskRemoved] = useState(null);\n\n  const list = async () => {\n    try {\n      setProcessing(true);\n      setError(null);\n      const response = await axios.get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, buildAuthHeader());\n      setTaskList(response.data.content);\n      setProcessing(false);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const remove = async taskToRemove => {\n    try {\n      await axios.delete(`${API_ENDPOINT}/tasks/${taskToRemove.id}`, buildAuthHeader());\n      setTaskList(taskList.filter(task => taskToRemove.id !== task.id));\n      setTaskRemoved(taskToRemove);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const save = async taskToSave => {\n    try {\n      if (taskToSave.id === 0) {\n        await axios.post(`${API_ENDPOINT}/tasks`, taskToSave, this.buildAuthHeader());\n      } else {\n        await axios.put(`${API_ENDPOINT}/tasks/${taskToSave.id}`, taskToSave, this.buildAuthHeader());\n      }\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const clearTaskRemoved = () => {\n    setTaskRemoved(null);\n  };\n\n  const buildAuthHeader = () => {\n    return {\n      headers: {\n        \"authorization\": `Bearer ${auth.credentials.token}`\n      }\n    };\n  };\n\n  const handleError = error => {\n    console.log(error);\n    const resp = error.response;\n\n    if (resp && resp.status === 400 && resp.data) {\n      setError(resp.data.error);\n    } else {\n      setError(error.message);\n    }\n\n    setProcessing(false);\n  };\n\n  return {\n    taskList,\n    error,\n    processing,\n    taskRemoved,\n    list,\n    remove,\n    clearTaskRemoved\n  };\n};\n\n_s(useTasks, \"nUQev2SmeE57F7a72iSXxOQAgrA=\");","map":{"version":3,"sources":["C:/Users/leand/Documents/workspace/looptasks-frontend/src/hooks/useTasks.js"],"names":["axios","useContext","useState","API_ENDPOINT","AuthContext","useTasks","auth","taskList","setTaskList","error","setError","processing","setProcessing","taskRemoved","setTaskRemoved","list","response","get","buildAuthHeader","data","content","handleError","remove","taskToRemove","delete","id","filter","task","save","taskToSave","post","put","clearTaskRemoved","headers","credentials","token","console","log","resp","status","message"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { useContext, useState } from \"react\";\r\nimport { API_ENDPOINT } from \"../constants\";\r\nimport { AuthContext } from \"./useAuth\";\r\n\r\nexport const useTasks = () => {\r\n    const auth = useContext(AuthContext);\r\n    const [taskList, setTaskList] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [processing, setProcessing] = useState(false);\r\n    const [taskRemoved, setTaskRemoved] = useState(null);\r\n\r\n\r\n    const list = async () => {\r\n\r\n        try {\r\n            setProcessing(true);\r\n            setError(null);\r\n            const response = await axios\r\n                .get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, buildAuthHeader());\r\n            setTaskList(response.data.content);\r\n            setProcessing(false);\r\n\r\n        } catch (error) {\r\n            handleError(error);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const remove = async (taskToRemove) => {\r\n        try {\r\n            await axios\r\n                .delete(`${API_ENDPOINT}/tasks/${taskToRemove.id}`, buildAuthHeader());\r\n            setTaskList(taskList.filter(task => taskToRemove.id !== task.id));\r\n            setTaskRemoved(taskToRemove);\r\n\r\n        } catch (error) {\r\n            handleError(error);\r\n\r\n        }\r\n    }\r\n\r\n    const save = async (taskToSave) => {\r\n        try {\r\n            if (taskToSave.id === 0) {\r\n                await axios\r\n                    .post(`${API_ENDPOINT}/tasks`, taskToSave, this.buildAuthHeader());\r\n            } else {\r\n                await axios\r\n                    .put(`${API_ENDPOINT}/tasks/${taskToSave.id}`, taskToSave, this.buildAuthHeader());\r\n            }\r\n        } catch (error) {\r\n            handleError(error);\r\n        }\r\n    }\r\n\r\n    const clearTaskRemoved = () => {\r\n        setTaskRemoved(null);\r\n    }\r\n\r\n\r\n    const buildAuthHeader = () => {\r\n        return {\r\n            headers: {\r\n                \"authorization\": `Bearer ${auth.credentials.token}`\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleError = (error) => {\r\n        console.log(error);\r\n        const resp = error.response;\r\n\r\n        if (resp && resp.status === 400 && resp.data) {\r\n            setError(resp.data.error);\r\n        } else {\r\n            setError(error.message);\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    return { taskList, error, processing, taskRemoved, list, remove, clearTaskRemoved };\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\";\nimport { AUTH_ENDPOINT, JWT_TOKEN_NAME } from \"../constants\";\n\nclass AuthService {\n  login(username, password, onLogin) {\n    axios.post(`${AUTH_ENDPOINT}/login`, {\n      username: username,\n      password: password\n    }).then(response => {\n      const jwtToken = response.headers['authorization'].replace(\"Bearer \", \"\");\n      sessionStorage.setItem(JWT_TOKEN_NAME, jwtToken);\n      onLogin(true);\n    }).catch(error => {\n      console.error(error);\n      onLogin(false);\n    });\n  }\n\n  getJWTToken() {\n    return sessionStorage.getItem(JWT_TOKEN_NAME);\n  }\n\n  isAuthenticated() {\n    return this.getJWTToken() != null;\n  }\n\n  logout() {\n    sessionStorage.removeItem(JWT_TOKEN_NAME);\n  }\n\n  getJWTTokenData() {\n    const jwtToken = this.getJWTToken();\n\n    if (jwtToken == null) {\n      return null;\n    }\n\n    const jwtTokenData = atob(jwtToken.split(\".\")[1]);\n    return JSON.parse(jwtTokenData);\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/leand/Documents/workspace/looptasks-frontend/src/api/AuthService.js"],"names":["axios","AUTH_ENDPOINT","JWT_TOKEN_NAME","AuthService","login","username","password","onLogin","post","then","response","jwtToken","headers","replace","sessionStorage","setItem","catch","error","console","getJWTToken","getItem","isAuthenticated","logout","removeItem","getJWTTokenData","jwtTokenData","atob","split","JSON","parse"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,EAAuBC,cAAvB,QAA4C,cAA5C;;AAEA,MAAMC,WAAN,CAAkB;AAEdC,EAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,EAA8B;AAC/BP,IAAAA,KAAK,CACJQ,IADD,CACO,GAAEP,aAAc,QADvB,EACgC;AAAEI,MAAAA,QAAQ,EAAGA,QAAb;AAAuBC,MAAAA,QAAQ,EAAGA;AAAlC,KADhC,EAECG,IAFD,CAEMC,QAAQ,IAAI;AACd,YAAMC,QAAQ,GAAGD,QAAQ,CAACE,OAAT,CAAiB,eAAjB,EAAkCC,OAAlC,CAA0C,SAA1C,EAAqD,EAArD,CAAjB;AACAC,MAAAA,cAAc,CAACC,OAAf,CAAuBb,cAAvB,EAAuCS,QAAvC;AACAJ,MAAAA,OAAO,CAAC,IAAD,CAAP;AAGH,KARD,EAQGS,KARH,CAQSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAV,MAAAA,OAAO,CAAC,KAAD,CAAP;AAEH,KAZD;AAeH;;AAGDY,EAAAA,WAAW,GAAG;AACV,WAAOL,cAAc,CAACM,OAAf,CAAuBlB,cAAvB,CAAP;AACH;;AAEDmB,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKF,WAAL,MAAsB,IAA7B;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACLR,IAAAA,cAAc,CAACS,UAAf,CAA0BrB,cAA1B;AACH;;AAEDsB,EAAAA,eAAe,GAAG;AACd,UAAMb,QAAQ,GAAG,KAAKQ,WAAL,EAAjB;;AACA,QAAIR,QAAQ,IAAI,IAAhB,EAAsB;AAClB,aAAO,IAAP;AACH;;AAED,UAAMc,YAAY,GAAGC,IAAI,CAACf,QAAQ,CAACgB,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAD,CAAzB;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AAEH;;AA1Ca;;AA8ClB,eAAe,IAAItB,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nimport {AUTH_ENDPOINT, JWT_TOKEN_NAME} from \"../constants\";\r\n\r\nclass AuthService {\r\n\r\n    login(username, password, onLogin) {\r\n        axios\r\n        .post(`${AUTH_ENDPOINT}/login`, { username : username, password : password })\r\n        .then(response => {\r\n            const jwtToken = response.headers['authorization'].replace(\"Bearer \", \"\");\r\n            sessionStorage.setItem(JWT_TOKEN_NAME, jwtToken);\r\n            onLogin(true);\r\n\r\n\r\n        }).catch(error => {\r\n            console.error(error);\r\n            onLogin(false);\r\n\r\n        });\r\n        \r\n\r\n    }\r\n\r\n\r\n    getJWTToken() {\r\n        return sessionStorage.getItem(JWT_TOKEN_NAME);\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return this.getJWTToken() != null;\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(JWT_TOKEN_NAME);\r\n    }\r\n\r\n    getJWTTokenData() {\r\n        const jwtToken = this.getJWTToken();\r\n        if (jwtToken == null) {\r\n            return null;\r\n        }\r\n\r\n        const jwtTokenData = atob(jwtToken.split(\".\")[1])\r\n        return JSON.parse(jwtTokenData); \r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}
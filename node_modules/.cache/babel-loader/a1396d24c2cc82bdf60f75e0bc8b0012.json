{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { createContext, useEffect, useState } from 'react';\nimport { AUTH_ENDPOINT, CREDENTIALS_NAME } from '../constants';\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n\n  const [credentials, setCredentials] = useState({\n    username: null,\n    displayName: null,\n    token: null\n  });\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  useEffect(() => {\n    loadCredentials();\n  }, []);\n\n  const login = async (username, password) => {\n    const loginInfo = {\n      username: username,\n      password: password\n    };\n    setProcessing(true);\n\n    try {\n      const response = await axios.post(`${AUTH_ENDPOINT}/login`, loginInfo);\n      const token = response.headers['authorization'].replace(\"Bearer \", \"\");\n      storeCredentials(token);\n      setProcessing(false);\n    } catch (error) {\n      console.error(error);\n      setError(\"O Login não pode ser realizado\");\n      setProcessing(false);\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem(CREDENTIALS_NAME);\n    setCredentials({\n      username: null,\n      displayName: null,\n      token: null\n    });\n  };\n\n  const storeCredentials = token => {\n    const tokenData = atob(token.split(\".\")[1]);\n    const credentials = {\n      username: tokenData.sub,\n      displayName: tokenData.displayName,\n      token: token\n    };\n    sessionStorage.setItem(CREDENTIALS_NAME, JSON.stringify(credentials));\n    setCredentials(credentials);\n  };\n\n  const loadCredentials = () => {\n    const storedCredentials = sessionStorage.getItem(CREDENTIALS_NAME);\n\n    if (storedCredentials !== null) {\n      setCredentials(JSON.parse(storedCredentials));\n    }\n  };\n\n  const isAuthenticated = () => {\n    return sessionStorage.getItem(CREDENTIALS_NAME) !== null;\n  };\n\n  return {\n    login,\n    logout,\n    isAuthenticated,\n    credentials,\n    error,\n    processing\n  };\n};\n\n_s(useAuth, \"ckYBg3b8CJcgreNKEPSMtxGwUEw=\");","map":{"version":3,"sources":["C:/Users/leand/Documents/workspace/looptasks-frontend/src/hooks/useAuth.js"],"names":["axios","createContext","useEffect","useState","AUTH_ENDPOINT","CREDENTIALS_NAME","AuthContext","useAuth","credentials","setCredentials","username","displayName","token","error","setError","processing","setProcessing","loadCredentials","login","password","loginInfo","response","post","headers","replace","storeCredentials","console","logout","sessionStorage","removeItem","tokenData","atob","split","sub","setItem","JSON","stringify","storedCredentials","getItem","parse","isAuthenticated"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { createContext, useEffect, useState } from 'react'\r\nimport { AUTH_ENDPOINT, CREDENTIALS_NAME } from '../constants';\r\n\r\n\r\nexport const AuthContext = createContext(); \r\n\r\nexport const useAuth = () => {\r\n    const [ credentials, setCredentials ] = useState({ username: null, displayName: null, token: null });\r\n    const [ error , setError ] = useState(null);\r\n    const [ processing, setProcessing ] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        loadCredentials();\r\n    }, []);\r\n\r\n    const login = async (username, password) => {\r\n        const loginInfo = { username : username, password : password };\r\n        setProcessing(true);\r\n\r\n        try{\r\n            const response = await axios.post(`${AUTH_ENDPOINT}/login`, loginInfo)\r\n            const token = response.headers['authorization'].replace(\"Bearer \", \"\");\r\n            storeCredentials(token);\r\n            setProcessing(false);\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            setError(\"O Login não pode ser realizado\");\r\n            setProcessing(false);\r\n        }\r\n        \r\n    }   \r\n    \r\n\r\n    const logout = () => {\r\n        sessionStorage.removeItem(CREDENTIALS_NAME);\r\n        setCredentials({ username: null, displayName: null, token: null });\r\n\r\n    }\r\n\r\n    const storeCredentials = (token) => {\r\n        const tokenData = atob(token.split(\".\")[1]);\r\n        const credentials = { username: tokenData.sub, displayName: tokenData.displayName, token: token };\r\n        sessionStorage.setItem(CREDENTIALS_NAME, JSON.stringify(credentials));\r\n        setCredentials(credentials);\r\n\r\n    }\r\n\r\n    const loadCredentials = () => {\r\n        const storedCredentials = sessionStorage.getItem(CREDENTIALS_NAME);\r\n\r\n        if (storedCredentials !== null) {\r\n            setCredentials(JSON.parse(storedCredentials));\r\n        }\r\n\r\n    }\r\n\r\n    const isAuthenticated = () => {\r\n        return sessionStorage.getItem(CREDENTIALS_NAME) !== null;\r\n    }\r\n    \r\n    return { login, logout, isAuthenticated, credentials, error, processing};\r\n}"]},"metadata":{},"sourceType":"module"}